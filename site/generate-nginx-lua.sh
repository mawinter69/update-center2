#!/bin/bash

USAGE="Usage: $0 [<release> ...]
"

[[ $# -gt 0 ]] || { echo "${USAGE}Expected at least one argument." >&2 ; exit 1 ; }

set -o pipefail
set -o errexit
set -o nounset

cat <<EOF
-- THIS FILE IS GENERATED
--
uri = ngx.var.uri
if ngx.re.match(uri, "^/update-center\\\\.(actual\\\\.json|json|html)$") then
 version = ngx.var.arg_version
 if version ~= nil then
EOF

echo "-- Version-specific rulesets generated by generate.sh"
n=$#
versions=( "$@" )
newestStable=
oldestStable=
oldestWeekly=
stableHeaderWritten=
weeklyHeaderWritten=
previousStableMajor=
previousWeeklyMajor=
previousStableMinor=-1
previousWeeklyMinor=-1
previousStableMicro=999

for (( i = n-1 ; i >= 0 ; i-- )) ; do
  version="${versions[i]}"
  IFS=. read -ra versionPieces <<< "$version"
  major=${versionPieces[0]}
  minor=${versionPieces[1]}
  patch=
  if [[ ${#versionPieces[@]} -gt 2 ]] ; then
    patch=${versionPieces[2]}
  fi

  if [[ "$version" =~ ^2[.][0-9]+[.][0-9]$ ]] ; then
    # This is an LTS version
    if [[ -z "$newestStable" ]] ; then
      newestStable="$version"
    fi

    if [[ -z "$stableHeaderWritten" ]] ; then
      stableHeaderWritten=true
      cat <<EOF
    major, minor, micro = string.match(version, '^(%d+)%.(%d+)%.(%d+)$')
    major = tonumber(major)
    minor = tonumber(minor)
    micro = tonumber(micro)
    if major ~= nil then
EOF
    fi

    if [[ -z "$previousStableMajor" ]] ; then
      previousStableMajor=$major
      cat <<EOF
        if major > $major then
            return ngx.redirect("/dynamic-stable-$version" .. uri)
        end
EOF
    fi

    if [[ "$previousStableMinor" -ne "$minor" ]] ; then
      previousStableMinor=$minor
      previousStableMicro=-1
      cat <<EOF
        if major == $major and minor > $minor then
            return ngx.redirect("/dynamic-stable-$version" .. uri)
        end
EOF
    fi

    if [[ "$previousStableMicro" -ne "$patch" ]] ; then
      previousStableMicro=$patch
      cat <<EOF
        if major == $major and minor == $minor and micro >= $patch then
            return ngx.redirect("/dynamic-stable-$version" .. uri)
        end
EOF
    fi

    cat <<EOF

EOF
    oldestStable="$version"
  
  else

    # Generation of weekly entries

    if [[ -z "$weeklyHeaderWritten" ]] ; then

      # terminate the stable headers
      if [[ -n "$stableHeaderWritten" ]] ; then
        cat <<EOF
      return ngx.redirect("/dynamic-stable-$oldestStable" .. uri)
    end
EOF
      fi
      weeklyHeaderWritten=true
      cat <<EOF
    major, minor, micro = string.match(version, '^(%d+)%.(%d+)$')
    major = tonumber(major)
    minor = tonumber(minor)
    if major ~= nil then
EOF
    fi

    if [[ -z "$previousWeeklyMajor" ]] ; then
      previousWeeklyMajor=$major
      cat <<EOF
        if major > $major then
            return ngx.redirect("/dynamic-$version" .. uri)
        end
EOF
    fi

    if [[ "$previousWeeklyMinor" -ne "$minor" ]] ; then
      previousWeeklyMinor=$minor
      cat <<EOF
        if major == $major and minor > $minor then
            return ngx.redirect("/dynamic-$version" .. uri)
        end
EOF
    fi


    # This is a weekly version
    # Split our version up into an array for rewriting
    # 1.651 becomes (1 651)
    oldestWeekly="$version"
  fi
done

if [[ -n "$stableHeaderWritten"  && -z "$weeklyHeaderWritten" ]] ; then
        cat <<EOF
      return ngx.redirect("/dynamic-stable-$oldestStable" .. uri)
    end
EOF
      fi

if [[ -n "$weeklyHeaderWritten" ]] ; then
  cat <<EOF
        return ngx.redirect("/dynamic-$oldestWeekly" .. uri)
    end
EOF
fi

cat <<EOF
    return ngx.redirect("/current" .. uri)
 end
end

EOF


